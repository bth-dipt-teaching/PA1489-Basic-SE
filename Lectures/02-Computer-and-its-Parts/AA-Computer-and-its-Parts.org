#+Title: The Computer and Its Parts
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+Date: 2025-03-26
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:2
#+STARTUP: beamer, num

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH2025


* Introduction
- What is really inside the computer in front of you?
- How does it work?
* Important Parts of a Computer
#+begin_src ditaa :file Computer-Parts.png :cmdline -b F9F5D7
  /----------+  +-----------------+  +----------------+
  | CPU      |  | RAM (Memory)    |  | Hard Disk      |
  | cGRE     |  |                 |  |                |
  +----------/  |                 |  |                |
                |                 |  |                |
                |                 |  |                |
                |                 |  |                |
                |           cBLU  |  | {s} cBLU       |
                +-----------------+  +----------------+

                /-----------------\
                | Display  cPNK   |
                |                 |
                |                 |
                \-----------------/
#+end_src

#+ATTR_LATEX: :height 3cm
#+RESULTS:
[[file:Computer-Parts.png]]

- The CPU Executes all code
- The CPU reads the code from RAM
  - It may need to first fetch the code from storage (hard drive, disk, ~C:~, network drive, \dots)
  - It may output data to a drive, or to the display.
- Other inputs: keyboard, mouse, sensors, network packets, \dots
* An Executing Program
#+begin_src ditaa :file Executing.png :cmdline -b F9F5D7
         /---------+
         | CPU     |
         |    cGRE |
         +---------/
            ^ Read, Execute and Write to/from RAM
            |
  +---------|--------------------------------------------------+
  | RAM     v                                                  |
  |     +--------------------------------------------------+   |
  |     | 1001110100110110110101001001001011100100110...   |   |
  |     +--------------------------------------------------+   |
  |                                                            |
  +------------------------------------------------------------+
#+end_src

#+RESULTS:
[[file:Executing.png]]

The CPU only understand very simple commands:
- Read from /this/ memory address and store it in register A in the CPU
- Read from /that/ memory address and store it in register B in the CPU
- Add Registers A and B and store the result in Register A.
- Write Register A to /this/ memory address

More complex commands mean many, /many/ such instructions
- Common commands are available as functions.

Courtesy of the operating system, the executing program
- Appears to be alone on the CPU
- Appears that it alone has access to of all the memory
- /Encapsulation/ is an important design principle.
- *Process* == Executing Program
* The Operating System
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

#+begin_src ditaa :file OperatingSystem.png :cmdline -b F9F5D7
  +-------------+    +-------------+    +-------------+    +-------------+
  | User        |    | User        |    | User        |    | User        |
  | Application |    | Application |    | Application |    | Application |
  |             |    |             |    |             |    |             |
  |             |    |             |    |             |    |             |
  | cGRE        |    | cGRE        |    | cGRE        |    | cGRE        |
  +-------------+    +-------------+    +-------------+    +-------------+
                                                               
  +----------------------------------------------------------------------+
  |                     Operating System                                 |
  |                                                             cBLU     |
  +----------------------------------------------------------------------+
                                                                  
  +----------------------------------------------------------------------+
  |                     Hardware                                cBLK     |
  +----------------------------------------------------------------------+
#+end_src

#+RESULTS:
[[file:OperatingSystem.png]]

The /Operating System/ is responsible for:
- Hardware Abstraction / Resource Management :: Provides an easy-to-use interface to all hardware.
- Interruption Management :: Handles interruptions, e.g. timer, disk, network, keyboard, mouse, etc.
- Process Management :: Divides the CPU time fairly across all user applications
- Memory Management :: Makes sure the executing program is available in RAM
  - Security :: Contains data so that other applications can not read it
- Device Management :: Reads and Writes from/to Devices, e.g.
  - Filesystem Management :: Reads and Writes from/to Disk
  - Network Management :: Reads and Writes from/to Network

* Hard Disk / Filesystem
- Persistent storage
  - What is saved here remains (with a few exceptions) even when you restart the computer.
- There is at least one hard drive in your computer, but you may have access to other storage units online.
- Most of the programs you run are stored locally on your hard drive.

- Organised into /Directories/, that contain other directories and /Files/
  - "Directory" \to Katalog, Mapp, Folder, 📁📂

- Files have a /name/ and an /.extension/: e.g. =MinaEgnaRecept.txt=, =Bild.png= , =Lordagsfilm.mp4=
  - The extension gives a hint which type of file it is.
  - You may need to change a setting in /Explorer/ so that you can see the extension part of filenames.

#+begin_quote
tree
.
├── BitWarrior
│   ├── design
│   │   ├── version1.png
│   │   ├── version1.puml
│   │   └── version2.puml
│   ├── makefile
│   ├── README.md
│   ├── src
│   │   ├── init.hh
│   │   └── start.cc
│   └── test
│       ├── catch.hpp
│       └── tests.cc
├── LICENSE
├── README.md
├── REPL
│   ├── makefile
│   ├── README.md
│   └── src
│       ├── basicrepl.cc
│       ├── basicrepl.hh
│       ├── repl.hh
│       └── start.cc
└── TicketSherpa
    ├── makefile
    ├── README.md
    └── src
        ├── event.hh
        ├── seatingstrategies.cc
        ├── seatingstrategies.hh
        ├── seatingstrategy.hh
        ├── start.cc
        ├── ticket.cc
        └── ticket.hh
#+end_quote
* More on the Filesystem
- Applications are installed in one place, e.g. ~/usr/local~
- Each application is installed in one sub-directory
- You have a /home directory/, e.g. ~/home/msv~
  - You may have sub-directories such as ~Documents~, ~Downloads~ , ~Media~, \dots
  - You can create your own sub-directories (one for each course, one for each lab?)
- All files are available to all programs.

- \dots It /should/ be this easy.
  - In Windows, it isn't.
* File availability
/All files are available to all programs/

- Any program can open any file -- but may not be able to understand it
- /You/ are in charge of your files -- not the program you normally use

- The easiest communication between programs is through the filesystem
- You may need to "help out" by pointing programs to the right directory and file
* What you see vs what happens
- Your Editor is one program (One block of memory)
- The program you write is stored (as plaintext) in memory
- When you press "run" ⏯️ 
  1. Your code is saved to disk
  2. The interpreter (another program) is started; it is loaded into memory, and the CPU begins to execute it
  3. The interpreter loads your code from disk
  4. It reads your code statement by statement, e.g. ~for x in range(1,10):~
  5. It translates statement by statement into code that can be run by this CPU and store this in memory
  6. Once done, it asks the CPU to execute the now runnable program

Note:
- Your code has to first be stored on disk; the interpreter cannot access the internal memory of your editor.
- Your code is executed in a separate process from the editor.
- In interpeted languages (such as Python), you need to invoke the interpreter every time you run your program.
* Readable source code
- *The source code is the only artefact intended to be readable by humans.*
  - It is read and modified often, so we should take care when writing it.
- We can use low-level languages, close to how the computer sees the world
  - e.g. Assembly language, C/C++
- We can use higher-level languages, closer to what we want the computer to perform
  - e.g. Java, JavaScript, Clojure, lisp
- We can use /compiled/ or /interpeted/ languages
  - Compiled languages /usually/ execute faster
  - Interpreted languages are /usually/ easier to edit on the fly (while they are running)
  - Some programming paradigms are more common in compiled languages, others are more common in interpreted languages
- We can use any text editor to write our program
  - We /should/ use an editor and development environment that help us write /and read/ our program.
* Examples of Files
** Java source and compiled
#+begin_src bash :results output
  cat ~/Documents/Play/JavaPonies/src/JavaPonies.java | head -20
  echo "--------------------"
  hexdump -C ~/Documents/Play/JavaPonies/out/JavaPonies.class | head -20
#+end_src

#+RESULTS:
#+begin_example
import java.util.Properties;
import java.io.*;

import model.PonyContainer;
import view.MainWindow;
import view.PonyWindow;

/** 
 ,* Startup class for the JavaPonies program.
 ,* Reads the CONFIGFILE <i>rootDir/resources/javaponies.cfg</i>
 ,*
 ,* Based on the Mono implementaion of Desktop Ponies
 ,* https://github.com/RoosterDragon/Desktop-Ponies/tree/master
 ,* Artwork included with this program is licensed under [Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)](https://creativecommons.org/licenses/by-nc-sa/3.0/).
 ,* This means you are allowed to share and alter the artwork, provided you give credit, do not use it for commercial purposes and release it under this same license.
 ,* [My Little Pony: Friendship is Magic](https://wikipedia.org/wiki/My_Little_Pony:_Friendship_Is_Magic) and sound files taken from the show are Copyright of [Hasbro](https:////www.hasbro.com/).
 ,*
 ,*
 ,* @author Mikael Svahnberg
 ,* @version 1.0
--------------------
00000000  ca fe ba be 00 00 00 41  00 56 0a 00 02 00 03 07  |.......A.V......|
00000010  00 04 0c 00 05 00 06 01  00 10 6a 61 76 61 2f 6c  |..........java/l|
00000020  61 6e 67 2f 4f 62 6a 65  63 74 01 00 06 3c 69 6e  |ang/Object...<in|
00000030  69 74 3e 01 00 03 28 29  56 07 00 08 01 00 14 6a  |it>...()V......j|
00000040  61 76 61 2f 75 74 69 6c  2f 50 72 6f 70 65 72 74  |ava/util/Propert|
00000050  69 65 73 0a 00 07 00 03  09 00 0b 00 0c 07 00 0d  |ies.............|
00000060  0c 00 0e 00 0f 01 00 0a  4a 61 76 61 50 6f 6e 69  |........JavaPoni|
00000070  65 73 01 00 08 6d 79 43  6f 6e 66 69 67 01 00 16  |es...myConfig...|
00000080  4c 6a 61 76 61 2f 75 74  69 6c 2f 50 72 6f 70 65  |Ljava/util/Prope|
00000090  72 74 69 65 73 3b 07 00  11 01 00 12 6a 61 76 61  |rties;......java|
000000a0  2f 69 6f 2f 46 69 6c 65  52 65 61 64 65 72 08 00  |/io/FileReader..|
000000b0  13 01 00 0e 6a 61 76 61  70 6f 6e 69 65 73 2e 63  |....javaponies.c|
000000c0  66 67 0a 00 10 00 15 0c  00 05 00 16 01 00 15 28  |fg.............(|
000000d0  4c 6a 61 76 61 2f 6c 61  6e 67 2f 53 74 72 69 6e  |Ljava/lang/Strin|
000000e0  67 3b 29 56 0a 00 07 00  18 0c 00 19 00 1a 01 00  |g;)V............|
000000f0  04 6c 6f 61 64 01 00 13  28 4c 6a 61 76 61 2f 69  |.load...(Ljava/i|
00000100  6f 2f 52 65 61 64 65 72  3b 29 56 07 00 1c 01 00  |o/Reader;)V.....|
00000110  13 6a 61 76 61 2f 69 6f  2f 49 4f 45 78 63 65 70  |.java/io/IOExcep|
00000120  74 69 6f 6e 07 00 1e 01  00 13 6d 6f 64 65 6c 2f  |tion......model/|
00000130  50 6f 6e 79 43 6f 6e 74  61 69 6e 65 72 0a 00 1d  |PonyContainer...|
#+end_example

** C/C++ source and compiled
#+begin_src bash :results output
  echo "--------------------"
  cat ~/Documents/Play/st/x.c | head -20
  echo "--------------------"
  hexdump -C ~/Documents/Play/st/st | head -20
#+end_src

#+RESULTS:
#+begin_example
--------------------
/* See LICENSE for license details. */
#include <errno.h>
#include <math.h>
#include <limits.h>
#include <locale.h>
#include <signal.h>
#include <sys/select.h>
#include <time.h>
#include <unistd.h>
#include <libgen.h>
#include <X11/Xatom.h>
#include <X11/Xlib.h>
#include <X11/cursorfont.h>
#include <X11/keysym.h>
#include <X11/Xft/Xft.h>
#include <X11/XKBlib.h>

char *argv0;
#include "arg.h"
#include "st.h"
--------------------
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  03 00 3e 00 01 00 00 00  00 59 00 00 00 00 00 00  |..>......Y......|
00000020  40 00 00 00 00 00 00 00  a8 96 01 00 00 00 00 00  |@...............|
00000030  00 00 00 00 40 00 38 00  0d 00 40 00 26 00 25 00  |....@.8...@.&.%.|
00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |@.......@.......|
00000060  d8 02 00 00 00 00 00 00  d8 02 00 00 00 00 00 00  |................|
00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|
00000080  18 03 00 00 00 00 00 00  18 03 00 00 00 00 00 00  |................|
00000090  18 03 00 00 00 00 00 00  1c 00 00 00 00 00 00 00  |................|
000000a0  1c 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|
000000b0  01 00 00 00 04 00 00 00  00 00 00 00 00 00 00 00  |................|
000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000d0  b0 45 00 00 00 00 00 00  b0 45 00 00 00 00 00 00  |.E.......E......|
000000e0  00 10 00 00 00 00 00 00  01 00 00 00 05 00 00 00  |................|
000000f0  00 50 00 00 00 00 00 00  00 50 00 00 00 00 00 00  |.P.......P......|
00000100  00 50 00 00 00 00 00 00  31 95 00 00 00 00 00 00  |.P......1.......|
00000110  31 95 00 00 00 00 00 00  00 10 00 00 00 00 00 00  |1...............|
00000120  01 00 00 00 04 00 00 00  00 f0 00 00 00 00 00 00  |................|
00000130  00 f0 00 00 00 00 00 00  00 f0 00 00 00 00 00 00  |................|
#+end_example

** Common file formats
Human-Readable:
- =.txt= plain text files
- =.c=, =.h=, =.cpp=, =.hpp=, =.cc=, and =.hh= C and C++ source files
- =.java= Java source file
- =.py= python source file
- =.md= markdown document
- =.html= document for viewing with a web browser

Needs a program to understand:
- =.docx= word document
- =.class= compiled java code
- =.exe= (windows) executable
- =.zip= compressed archive of files and directories

Repeat: You can /open/ any file with any program
- it may not be able to understand it
- it may not /need/ to understand it (e.g. to attach it to an e-mail, or to commit to configuration management)
* Summary
- A Computer consists of CPU, RAM, and Storage
- A CPU reads instructions from RAM and executes them one by one
  - A series of instructions is a program.
- The filesystem is persistent, structured, and used for communication between programs and over time.
- Many programs may collaborate to solve a particular task
- Programs are /encapsulated/ from each other
