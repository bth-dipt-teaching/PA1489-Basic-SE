#+Title: Practical: Working with Git
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+Date: 2025-04-02
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:1
#+STARTUP: beamer num

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH2025

* Introduction
- Git is today the most common configuration management tool

Today's lecture
- Common Git Commands
- Common Git Workflows
- Lab instructions: Get Started with Git
- Assignment instructions: Show the TA that you can work with Git.
* Git Basics
- You have to tell git that a certain directory should be configuration managed
- You have to decide yourself when and what to commit
- You work locally on your own =branch= until you decide to publish (merge)
- Git uses a two-part commit model
  1. First you *stage* your changes
     - You can add and remove files to the staging area
     - You can even add and remove specific parts of files
     - You can change your mind, this is just a draft.
  2. Then you *commit* what's in your staging area.
* Basic Commands
- =git init= Start a new repository
- =git status= Where am I? What needs to be done?
- =git add= Add files to the staging area.
- =git commit= Commit what's on the staging area.
- =git clone= Clone an existing repository from somewhere else (e.g. a server)
- (=git stash=) Put your current work to the side without committing
** Show and Tell :Demo:noexport:
#+begin_src bash :session gitex :results output
mkdir /tmp/git-example
cd /tmp/git-example
git init
#+end_src

#+begin_src bash :session gitex :results output
echo "hello" > h.txt
echo "world" > w.txt
ls -l
cat *

git status # Kolla vad git anser om det vi har såhär långt
#+end_src

#+begin_src bash :session gitex :results output
git add h.txt
git add w.txt
git rm --cached w.txt # I changed my mind, I don't want this file added yet
# git add --all   # Adds all files that are not yet added.

git status
#+end_src

#+begin_src bash :session gitex :results output
git commit -m "Finally"
git status
#+end_src

#+begin_src bash :results output
  git clone git@github.com:mickesv/MeanStreets.git /tmp/ms
  ls -l /tmp/ms
#+end_src
* .gitignore
- =.gitignore= tells git which files to /not/ track, for example:
  - compiled files (e.g. binaries, =.class=-files, =.pdf=-files)
  - derived files (e.g. images of graphs generated from source code)
  - downloaded packages (e.g. things you download with =pip= or =npm= (the entire =node_modules= directory))
  - files generated by your IDE
  - files containing authentication credentials
    - (such files are anyway a Very Bad Idea!)
- Can have multiple =.gitignore= -files
  - one "global" for your user -- applies to all repositories
  - one in the root of a repository -- applies to the entire repo
  - one in each subdirectory in a repository -- applies to that directory (and recursively to sub-directories)

- Any file, not previously committed, can be added to a =.gitignore=
- Can use wildcards to ignore all files of a specific type, e.g. =*.pdf=
- =.gitignore= is just a textfile, you can edit it like any other file
- Common have support from your tool to append to it.

- /It is important hygiene to maintain good .gitignore/
  - Only /relevant/ files should be committed (and published) to your repository.
* Support in your Development Environment :Demo:
[[./vscodium-explorer.png]][[./vscodium-git.png]][[./vscodium-git-menu.png]]
* Branching
- =git branch «branch-name»= create a new branch (without switching to it)
- =git checkout «branch-name»= switch to a different branch
- =git checkout -b «branch-name»= first create the branch and then switch to it

#+begin_src bash
$ git log --oneline --graph
 *   e644bdf (HEAD -> main, origin/main) Merge remote-tracking branch 'origin/main'
 |\
 | * 497cb6d c.txt
 * | 2a655d9 addded d
 |/
 * 07c6db7 (testar) added b
 * f28fad6 added a
#+end_src

[[./vscodium-git-log.png]]

* Merging
1. Commit all your changes in your branch (e.g. a branch named =feature0=)
2. Checkout the branch you want to merge with (e.g. =git checkout main= to switch to the main branch)
3. =git merge «branch-name»= to merge the branch with the current branch (e.g. =git merge feature0=)

If you are lucky this will work
- If you have not modified the same files.
- If there are overlapping changes git will call a "merge conflict" and refuse to do anything until you resolve it.
- This is common when there are several of you collaborating in a project
- You /will/ encounter merge conflicts, you will need to learn how to deal with them.
* Example of Merge Conflict :Example:
:PROPERTIES:
:BEAMER_OPT: shrink=20
:END:

#+ATTR_ORG: :width 200
[[./threewaymerge.png]]
- Same example as before
- Assume:
  - =base= is the =master= branch
  - =source= and =target= are in separate branches
- For example:
  - you and your friend both started working two features
  - your friend finished first and committed =source=
  - you now want to merge their changes into your branch =target=, so you can use their feature.

#+begin_src bash
$ git status
On branch trg
...

$ git merge src
Auto-merging c.txt
CONFLICT (content): Merge conflict in c.txt
Automatic merge failed; fix conflicts and then commit the result.
#+end_src
* Manual Merge :Example:
#+begin_src bash
$ cat c.txt
<<<<<<< HEAD
AA
GG
=======
>>>>>>> src
BB
CC
ddd
EE
<<<<<<< HEAD
f
DD
=======
fff

>>>>>>> src
#+end_src

Yuck! Let's tell git to use a merge tool:

#+begin_src bash
git mergetool --tool=kdiff3
#+end_src

#+ATTR_ORG: :width 600
[[./kdiff-screenshot.png]]
** The End Result
- In the end, I have done the merge myself.
- The output file is newer than =base=, =source= /or/ =target=
* Working with a Server
[[./collab-branching.png]]

- Git is supposed to be distributed
- In practice, you almost always work with a server
- A /merge/ with /origin/ has its own command: =git push=
  - In every other case you /pull/ changes to the branch you are working with
  - In this case, you /push/ changes to a server

Workflow:
1. =git clone «URL to online repo»=
2. (work as normal; git branch, git commit, \dots)
3. =git push=

As before, you may expect to get an error here if there are merge conflicts on the server
* Fetch what is new from =origin=
- There are shortcuts but it is recommended to use =git fetch=
- Gives you time to study what has happened in =origin=
- May for example compare branches: =git diff main origin/main=
- Once done, you merge: =git merge origin/main=  (and maybe =git push=, to update the server)

#+begin_src bash
# Fetch everything new but do not do anything else
$ git fetch
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 277 bytes | 277.00 KiB/s, done.
From https://codeberg.org/mickesv/gitex
   07c6db7..497cb6d  main       -> origin/main

$ git branch --all
 * main
   testar
   remotes/origin/main      # <- Everything fetched is in here
#+end_src

... If you expect everything to work you can use =git pull=
- an automatic /fetch+merge/
- not guaranteed to work in all cases
* Summary
- A /local repository/ is just a filesystem directory
- Workflow:
  1. Edit files to solve a specific /task/
  2. Add the changes to the staging area
  3. Commit /with a meaningful commit message related to the solved task/ to the current (and local) branch.
  4. Possibly push your commits to a server
- A repository may consist of several /branches/
  - /Branching/ and /Merging/ are at the heart of working with configuration management tools
  - /Merging/ in particular may be challenging.
  - Use tools for dealing with merge conflicts.
- Working with a server:
  1. /clone/ to download a local copy (and create a local branch to work on)
  2. /push/ to upload your commits
  3. /fetch/ to download what has been done on the server since your last sync
* The Lab This Week :Info:
- Get started with Git
- *Show the TA* -- this is part of the marked assignmments
* Get Started with Git
** Register an account
- Register an account at some git server:
  - https://github.com/signup or https://education.github.com/pack
  - https://gitlab.com/users/sign_up
  - https://www.atlassian.com/software/bitbucket/bundle
  - https://codeberg.org/

- Github is still very popular for open source projects
  - In some trouble for how they may use the code you upload ther
- Many migrated over to Gitlab when Microsoft bought Github
- Atlassian and BitBucket are very well integrated with the rest of their produxcts
  - Used to have very generous offers for students and universities (unclear status these days)
- Codeberg.org is specifically focussed on open source projects.
** Create and Clone a Repository
- Easiest to start in the web interface
- Name the project to something creative, e.g. =gitExample=
- When you are done, there should be a link, e.g. under =<> Code= that can be used to clone the project.
  - Example: ~git clone https://codeberg.org/mickesv/gitex.git~
  - This will set up =remote/origin= for you.
** Create some git history
1. Create some files
2. Add them to the staging area and commit
3. Change one of the files; add and commit again
4. Repeat a couple of times.
5. Create a branch
6. Create some files, add and commit.
7. Edit some of your first files and commit.
8. Check the log.
9. Check status.
10. Push to the server
11. Check the status.
** (Optional) Fork a colleagues repository
1. Find the account of a colleague (on the same server)
2. Pick a repository and fork it (for example the example account that you just created)
3. Clone it to your computer and create some more git history
4. When you have pushed everything to your fork, create a =pull request= in your colleagues repository (via the web interface)
** (Optional) Handle a Pull Request
When your colleague have created a pull request to your repo, handle it.
- Inspect every commit to see what has been changed
- Can it be merged automatically? This should be indicated somewhere.
- Create a merge commit.

Create some more commits in your respective forks.
- Create a new pull request.
- This time, /deny/ the pull request.
** (Optional) More participants in the same project
- Divide into groups of around 5 people
- Pick a colleagues repository
- Enter =Settings/Collaborators= and add all of you to the same project
- Clone the repo

Now you are only allowed to work in a specific file =charlie-foxtrot.txt=
- You may add new text
- You may edit the existing text
- You may insert text; between two lines, and in the middle of a line
- You may remove text

Commit regularly (max 2-3 changes per commit)
Push after every commit.
- You may need to do a =fetch/merge= in order to be allowed to do a =push=

*Handle the merge conflicts*

Discuss in small groups: What can you do to get fewer conflicts?
* Show the TA :Assignment:
Show the TA the following:

File management:
   1. Create a directory
   2. Create some files in the directory
   3. Open files in your development enviromment; edit; save.
   4. Close your development environment and find the files via a file explorer (not your development environment).

Working with git:
   5. [@5] Git clone from an online repository to a new directory.
   6. Edit some files in the git repo using your development environment.
   7. Find the files in a file explorer (not your development environment).
   8. Git add and git commit of your edited files.
   9. Git push to your online repository.
   10. Show the files in your online repo (using web browser).
