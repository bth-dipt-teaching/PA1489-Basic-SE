#+Title: PA1489 Grundläggande Mjukvaruutveckling 
#+Subtitle: Introduction
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+Date: 2025-03-25
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:1 toc:nil
#+STARTUP: beamer num

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH2025

* Introduktion
- Om Kursen
- En Pragmatisk Mjukvaruutvecklare
- En Pragmatisk Ansats
- Kort om exekverande program
* About Me: Mikael Svahnberg
#+ATTR_LATEX: :height 2cm
#+ATTR_ORG: :width 300
[[file:~/Documents/Personal/avatar.png]]


- Assistant Professor, PhD in Software Engineering
- mailto:Mikael.Svahnberg@bth.se
- https://mickesv.codeberg.page/
- Interests:
  - Software Architectures, Software Architecture Evaluation,
    Software Architecture Evolution, Requirements Engineering,
    Large Scale Requirements Engineering, Market-Driven Requirements Engineering,
    Software Product Lines, Software Reuse, Empirical Research Methodology,
    Software Engineering Decision Support, Static Code Analysis, Software Architecture Reconstruction
* Diskutera: Kursplan PA1489 :Discussion:
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

Följande Lärandemål examineras i kursen:

*Kunskap och Förståelse* Efter genomförd kurs ska studenten kunna:
- Visa grundläggande kunskaper i modern mjukvaruutveckling och containerbaserad mjukvaruutveckling genom att skriftligt beskriva och sammanfatta erfarenheter och observationer från övningar och projekt.

*Färdighet och förmåga*	Efter genomförd kurs ska studenten kunna:
- Utifrån en specifikation utveckla, dokumentera, och presentera ett mjukvaruprojekt som exekverar på ett fåtal kommunicerande containers.
- Felsöka ett program med hjälp av testkod och en debugger.
- Samarbeta runt ett gemensamt utvecklingsprojekt med hjälp av konfigurationsverktyg.
- Hantera de verktyg och utvecklingsmiljöer som används vid utveckling och felsökning med containerbaserad mjukvaruutveckling.

*Värderingsförmåga och förhållningssätt* 	Efter genomförd kurs ska studenten kunna:
- Skriftligt reflektera över sina lösningar och sitt användande av utvecklingsverktyg.
* Mål med Kursen I
- Ni har precis börjat er väg till att bli Programvaruutvecklare
- Under de närmaste åren kommer ni fördjupa er i en stor mängd teorier, principer, och teknologier.
  - Ni kommer bygga upp er egen /verktygslåda/

- Den här kursen ger en översikt över vissa viktiga grunder i denna verktygslåda
- Tekniker
  - konfigurationshantering
  - enhetstestning
  - kod-dokumentation
  - olika programmeringsspråk
  - utveckling i och med virtuella maskiner
  - \dots
- Men också en grundläggande filosofi:
  - En Pragmatisk Mjukvaruutvecklare
  - /Använd de verktyg som är dig givna, och gör dem till dina egna/
* Mål med Kursen II
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

- Kursen kommer /inte/ hinna gå på djupet om mjukvaruutveckling eller någon enskild teknik.
  - ni har tre (plus två) år på er för detta

Målet är att ni skall:
- få upp ögonen för vad som finns tillgängligt
- få en insikt i hur olika teorier, principer, och teknologier passar ihop
- få /viss/ övning i att använda de mest grundläggande teknologierna

Cave!
- Mycket kommer verka svårt
- Du kommer kanske inte hinna lära dig allt
- Du kommer kanske inte hinna göra alla övningar

** Det är ok. Det är tänkt så.
Min förhoppning:
- Kom ihåg att teknologierna /finns/, så att du kan använda dem senare, /när du behöver dem/
- Försök etablera /några/ goda, pragmatiska vanor redan nu, och bygg på efter hand.
- Kom tillbaka till det här kursmaterialet om något år (när du behöver) och använd det som referensmaterial.
* Struktur på Kursen
- Lärplatform :: Canvas
- Föreläsningar :: ger en översikt över ämnet och teorin.
- Läsanvisningar :: inför vissa föreläsningar, I andra fall bara ett ämne som ni kan förbereda er fritt på.
- Examinerade Uppgifter :: sätter samman hantverket till en helhet.
- Övningar :: om innehållet i varje föreläsning, går på djupet med det praktiska hantverket
- /Ingen tenta/

Varje vecka:
- 2 föreläsningar à 2h
- 1 praktisk föreläsning à 2h
- 1 laboration à 4h
- *Enskilt arbete* på egen hand eller i grupp.
* Kursliteratur
D. Thomas, A. Hunt, The Pragmatic Programmer, 20th Anniversary Edition, 2020. ISBN-10: 0-13-595705-2

#+ATTR_LATEX: :height 5cm
#+ATTR_ORG: :width 400
[[./Thomas-Hunt-2020-Pragmatic-Programmer.png]]

* Föreläsningar
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

- Föreläsningarna använder sig av en blandning av språk (svenska, engelska) och programspråk.
- Språket och språken är verktyg som du kommer använda dig av på olika vis under hela din studietid och din karriär.

- Varje vecka
  - Översikt över tekniker och teknologier
  - Praktiskt arbete med någon teknik
  - Genomgång av veckans lab-uppgift
  - Enskilt arbete
  - Lab-tid för att samla er, få svar på frågor, och redovisa.

Översikt över föreläsningarna:

1. Du och Din Dator
   - Datorn och Dess Beståndsdelar
   - Utvecklingsmiljön
   - God ingenjörspraxis

2. Verktyg för att producera Mjukvaran
   - Konfigurationshantering
   - Testning och Debuggning
   - Olika Programspråk
   - Dokumentation

3. Modern Utveckling
   - Containers
   - Filer och Databaser
   - Web-services
   - Web-applikationer

* Uppgifter i Kursen
- Tre Examinerade uppgifter om vardera 2.5hp:
  1. Konfigurationshantering, Containers, Testning och Debuggning  (Redovisas i labsal)
  2. Implementation och Dokumentation (Redovisas i labsal)
  3. Ingenjörsdagbok (*Lämnas in på Canvas*)

- Uppgifterna är /individuella/ 
  - Ni får väldigt gärna samarbeta när ni arbetar.
  - Deluppgifterna för uppgift 1 redovisas individuellt.
  - Uppgift 2 får redovisas tillsammans (som mest 5 studenter per grupp)
  - Uppgift 3, Ingenjörsdagboken, lämnas in individuellt.

- Uppgifterna introduceras vecka för vecka (se "Practical"- föreläsningarna)
- Men /läs hela beskrivningen redan nu!/
  - I synnerhet "Ingenjörsdagboken" skall uppdateras kontinuerligt.

- Kompletteringar:
  - Inom två veckor efter att kursen slutar
  - När kursen ges nästa gång
  - Se Canvas för datum.

- *Ni kommer inte hinna bli världsbäst på de teknologier som behövs!*
  - Kopiera och anpassa i stället.
  - Men /förstå/ vad ni kopierar!
  - /Börja med vad ni kan/
    - Lös vad ni redan kan lösa, planera resten.
* Några ord om AI
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

*"Who's the more foolish? The fool or the fool who follows it?"*
-- Obi Wan Kenobi

- Det går säkert få en bra början på inlämningsuppgifterna från en AI.
- Vad vinner ni på detta? Lär ni er något? Hur vet ni att AI:n gör rätt?
- Det här är er framtida karriär, det är det yrke ni själva har valt.
  - Vill /ni/ ha en utbildning, eller vill ni hellre ge den till en AI någonstans?
- Övningarna lämnas inte in, betygssätts inte, utan är /bara/ till för att ni skall ha en chans att lära er något.
- Inlämningsuppgifterna har fokus på era lärdomar och reflektioner och kan komma att kompletteras med muntlig genomgång.

Dessutom:
- Framtiden kommer kräva /fler/ utvecklare med en /gedigen/ kunskap om programvaruutveckling, inte färre.
- Man sätter inte en junior programmerare på att granska kod
- Företag kommer behöva folk som förstår vad AIn spottar ur sig, vilka säkerhetsbrister den har, och vad man skall göra åt det.

* Djupare Introduktion till Uppgifterna
** Uppgift 1: Verktyg
Tre deluppgifter:
- 1.1 Git
- 1.2 Docker, Docker Compose
- 1.3 Testing & Debugging

Varje del visas i labsal; Uppgiftsbeskrivningen innehåller deluppgifter du skall göra på egen hand, och de steg du skall visa under redovisningen ("Show the TA")
** Uppgift 2: Implementation och Dokumentation
- Bygg en mindre applikation, enligt instruktioner i uppgiftsbeskrivningen
- Steg för steg: Några nya deluppgifter per vecka.
- Under tiden: Försök komma ihåg och komma igång med goda programmerings-seder
  - Strukturerad kod
  - Dokumenterad kod
** Uppgift 3: Ingenjörsdagbok
- /Loggboken/ är bland de viktigaste verktyg som du har.
  - Vem sade vad? När?
  - Hur fungerar =X=?
  - Vad behöver jag göra med =Y=?
  - Vilka kommandon använder jag med verktyg =Z=?
  - Andra domäner:
    - Kemi: Vilka substanser blandade jag i  bägare =X=?
    - Musik: Hur vill dirigenten att åttondelsnoterna i takt 30 spelas?
    - Snickeri: Hur skall jag få till den här fogen?
    - Bakning: Jag råkade använda fel mjöl till min surdeg. Vad är effekterna?
    - \dots
- I vissa situationer och företag är den ett /kvalitetssäkringsverktyg/
- Oftast är det din individuella dagbok, bara till för dig.
  - Ni kommer sällan ha lärare eller arbetsgivare som efterfrågar den

/Inte efterfrågad \ne inte viktig/

... Därav uppgiften i den här kursen. /Skapa en vana/

- Börja idag!
- Anteckna när du arbetar med uppgifterna i kursen
  - Anteckna hellre lite varje dag än mycket sista dagen
- Sätt datum på anteckningarna
- Dagboken skall innehålla anteckningar om:
  - Konfigurationshantering
  - Container-utveckling
  - Testning och Debugging
  - Implementation och Dokumentation - uppgiften
- Dagboken skall vara regelbundet uppdaterad (minst 5 gånger över hela kursen)
* Verktyg
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

*OBS* Det är /du/ som är ansvarig för vad du installerar på /din/ dator!

I den här kursen behöver du:
- Någon utvecklingsmiljö (Du har troligen redan VSCode installerat)
- Konfigurationshanteringsverktyg;
  - Git https://git-scm.com/downloads
  - Gärna något grafiskt gränssnitt, t.ex. Github Desktop https://github.com/apps/desktop
- Något verktyg för att arbeta med containers; Docker https://www.docker.com/


Till senare kurser kanske du vill ha:
- /Java/ , t.ex. OpenJDK https://openjdk.org/ 
- någon C/C++-kompilator, t.ex. gcc https://gcc.gnu.org/
- /node.js/ lokalt: https://nodejs.org/en
- ett byggverktyg, såsom =make=
  - https://www.gnu.org/software/make/
  - https://cmake.org/ 
- något verktyg för att modellera programvarudesign:
  - PlantUML http://plantuml.com/

Det finns också open-source-alternativ:
- VSCode \to VS Codium https://vscodium.com/ 
- Docker \to Podman https://podman.io/
- Emacs https://www.gnu.org/software/emacs/
- Vim https://www.vim.org/
* En Pragmatisk Mjukvaruutvecklare / En Pragmatisk Filosofi
[Thomas & Hunt, Kapitel 1]

- /It's Your Life/ :: It's your career. Your choice. Be good at it. Improve.
- /Commitment Culture/ :: Take responsibilty for what you do.
- /We live in a Changing World/ :: Recognise change and prepare to handle it.
- /Trade-offs are Inevitable/ :: Learn to recognise what is /good enough/
- /You work in a Team/ :: A team consisting of current colleagues /as well as your future self/
  - Your commitment is to the team /and/ the customer.
  - Communicate with your team.
  - Keep your code tidy and improve it.
  - Fight the inevitable decay.
* Entropi
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

- Minnens i gymnasiefysiken?
- I mjukvara: /software rot/
  - Tecnical debt :: Snabbfix nu, vi lovar oss själva att fixa senare
  - Architecture erosion / architecture decay :: Vi glömmer den ursprungliga tanken och börjar ta genvägar

Resultat:
- Det tar längre och längre tid att göra även enklare saker i koden.
- Mer tid går åt att förstå vad man skall göra och vad konsekvenserna blir
- Nyanställda behöver mer och mer tid på sig innan de kan bli produktiva
- Du blir mer och mer missnöjd med ditt arbete

Olika orsaker:
- Vi hinner inte göra rätt
- Vi minns inte vad som är rätt
- Vi förstår inte av koden och/eller dokumentationen vad som är rätt
- Det finns ingen dokumentation om vad som är rätt
- Vi bryr oss inte om vad som är rätt för systemet eller resten av teamet

Fundamentalt för att motarbeta mjukvaruröta: *Fixa det som är trasigt*
- Fortsätt bry er
- Visa för resten av teamet att det spelar roll
- Visa i projektplanen att det tar tid och kostar
- Ta inte sönder saker när du bygger nytt. *Testa din kod*
* Kommunikation
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

- Ditt karriärval handlar om att kommunicera
  - Kommunicera med en dator
  - Kommunicera med dig själv
  - Kommunicera med ditt framtida själv
  - Kommunicera inom ditt team
  - Kommunicera med din chef
  - Kommunicera med andra utvecklingsteam
  - Kommunicera med Kunder och slutanvändare
  - \dots

- Det visar sig att färdighet i /språk/ är viktigare än färdighet i matte för att bli en bra programmerare.

Prat et al, "Relating Natural Language Aptitude to Individual
Differences in Learning Programming Languages". Scientific Reports, 2020.

 https://www.nature.com/articles/s41598-020-60661-8

*TL;DR* A study showing that the most important skills that facilitates
learning programming are short term memory and problem solving
(explaining 34% of the variance), and in second place language aptitude
(17%). Math skills was quite irrelevant (2%).
* Kommunikation
Det här är viktigt, så ett citat till:

#+begin_quote

Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

#+end_quote

-- Donald Knuth, 1984.

* En Pragmatisk Ansats
[Thomas & Hunt, Kapitel 2]

#+ATTR_LATEX: :height 2cm
#+ATTR_ORG: :width 400
[[./arne01.png]]

- Designa först :: Tänk igenom vad du skall göra innan du gör det.
  - Easier To Change :: All bra design är lättare att ändra än dålig design.
  - DRY; Don't Repeat Yourself :: Upprepning == svårare att ändra
  - Isolera mot Förändring :: Isolerat == lättare att ändra
  - Sikta mot det Osäkra :: Utvärdera så mycket av designen som möjligt i varje cykel.
- Prototyper :: Billig utvärdering av din design
- Estimat :: Hur lång tid kommer det ta? Hur svårt är det? Vad behöver jag veta för att avgöra detta?
* Easier to Change

#+begin_quote
*Bra Design är lättare att ändra än Dålig Design*
#+end_quote

- Vi designar för /underhållbarhet/
- Datorn begriper vad vi vill göra ändå
- Det skall vara lätt /för oss människor/ att ändra /våra artefakter/
- Förändring är oundvikligt; designen måste tåla det.

Grundläggande designprinciper, Objektorienterade designprinciper hjälper:
- Encapsulation
- Single Responsibility Principle
- Low Coupling
- High Cohesion
- \dots
* Don't Repeat Yourself
:PROPERTIES:
:BEAMER_OPT: shrink=5
:END:

- Mjukvara byggs inte i en sittning.
- Det är inte ett vackert planerat och fint broderat lapptäcke.
- Snarare en hög med blöta kökstrasor som har slängts i en hög under 40 år.
- Varje nytt lager är (Lientz et al. 1978):
  - förändrade krav,
  - uppdateringar för att fixa gamla fel, eller
  - uppdateringar för att hänga med en föränderlig verklighet.

Det finns en stor risk att du upprepar gammal kod bara för att du inte hittar den
- \dots Och du kan ge dig den på att den gamla koden kommer ställa till det för dig.
- Upprepad kod == svårare att ändra

*Inte bara programkod*
- Kunskap
- Avsikt
- Design
- Lösning av samma problem
- Dokumentation
  - även dokumentation av koden (kommentarer i koden, Doxygen, osv.)
* Inkapsling
- Isolera delsystem, komponenter, klasser, mm. från varandra
- Isolera funktionalitet från varandra

- Lättare att designa, bygga, underhålla, testa.
- Lättare att förstå, lättare att förklara
- Lättare att byta från en lösning till en annan.
  - Lätt att ha en /Plan B/
  - /Lättare att ändra designen/

*En stor del av kursen kommer handla om inkapsling i olika former*

* Sammanfattning
Kursen handlar om att /reservera plats/ i din framtida verktygslåda.
- Allt är nytt just nu; allt känns svårt.
- Du lär dig om verktyg som du /kommer/ använda

Dagens "teori": D. Thomas, A. Hunt, The Pragmatic Programmer, 20th Anniversary Edition, 2020. ISBN-10: 0-13-595705-2
- Kaptiel 1: En Pragmatisk Filosofi
- Kapitel 2: En Pragmatisk Ansats

- Du arbetar i ett team
- Åtagandekultur
- Designa för förändring
- Minska risker genom att sikta mot det osäkra

