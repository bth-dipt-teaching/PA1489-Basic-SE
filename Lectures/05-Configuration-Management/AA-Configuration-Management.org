#+Title: Configuration Management
#+Author: Mikael Svahnberg
#+Email: Mikael.Svahnberg@bth.se
#+Date: 2025-04-02
#+EPRESENT_FRAME_LEVEL: 1
#+OPTIONS: email:t <:t todo:t f:t ':t H:1
#+STARTUP: beamer num

#+LATEX_CLASS_OPTIONS: [10pt,t,a4paper]
#+BEAMER_THEME: BTH2025

* Introduction
- Grunderna i Konfigurationshantering
- Thomas & Hunt; Kapitel 3: The Basic Tools

\sum Allt Ã¤r text. /Allt skall Konfigurationshanteras!/
* Konfigurationshantering
- /Versionshantering/ kontra /Konfigurationhantering/
- Versionshantering:
  - En gigantisk undo-knapp fÃ¶r en hel fil.
  - Automatiskt skÃ¶tt, inte en massa idioti med att dÃ¶pa om filerna efter vem som har Ã¤ndrat dem.
- Konfifurationshantering skÃ¶ter dessutom
  - Vilka versioner av filer fungerar ihop?
  - I vilka filer implementerar vi /feature X/
  - I vilka filer lÃ¶ser vi /issue Y/ (Bug/feature request/\dots )?
  - Vilka versioner av alla filer Ã¤r det som kÃ¶r hos /Kund Z/?
  - StÃ¶d fÃ¶r (semi-) automatisk /merge/ om flera har Ã¤ndrat filen
  - StÃ¶d fÃ¶r att utveckla samma fil samtidigt fÃ¶r olika features.

- KÃ¤nda verktyg (idag)
  - Subversion ::
    - Klassiskt server-orienterat: all CM sker pÃ¥ en och samma server
  - Git ::
    - AnvÃ¤nds av de flesta idag
    - I teorin distribuerat; i praktiken ocksÃ¥ server-orienterat
  - Mercurial ::
    - Liknar git, men anses av mÃ¥nga vara lite enklare
* Hela projektet skall alltid konfigurationshanteras
- KÃ¤llkod
- Designdokumentation
- Dokumentation
- Script fÃ¶r att bygga applikationen
- Script fÃ¶r att stÃ¤lla i ordning utvecklingsmiljÃ¶n / testmiljÃ¶n / produktionsmiljÃ¶n
- Script fÃ¶r att starta applikationen

* AnvÃ¤nd Alltid Konfigurationshantering
- Ã„ven om det Ã¤r ditt eget hobbyprojekt
- Inklusive konfigurationsfiler fÃ¶r att stÃ¤lla i ordning din dator och utvecklingsmiljÃ¶
  - SvÃ¥rt om allt ligger i windows registry
  - LÃ¤tt (och sjÃ¤lvklart) om allt finns i .rc-filer i din anvÃ¤ndarkatalog

*If it's not comitted, it does not exist!*
* Det bÃ¶rjar med en Branch...
#+begin_src dot :file branch1.png
  digraph G {
          rankdir="LR";
          bgcolor="transparent";
          node[width=0.15, height=0.15, shape=point, color=black];
          edge[weight=2, arrowhead=none, color=darkgray];
          node[group=master];
          1 -> 2 -> 3 -> 4 -> 5;
          node[group=branch];
          //2 -> 6 -> 7 -> 4;
  }
#+end_src

#+RESULTS:
[[file:branch1.png]]

- KÃ¤rnan i all konfigurationshantering Ã¤r att inse att du /alltid/ arbetar pÃ¥ en gren
  - Du arbetar med filerna pÃ¥ en delad nÃ¤tverkskatalog
  - Du kopierar projektet till din dator
  - Du klonar projektet
  - Du skapar en ny gren fÃ¶r att implementera en ny feature

- Utmaningen blir alltid att kombinera fÃ¶rgreningar med en /merge/
  - Om du Ã¤r den enda som har redigerat en viss fil
  - Om du Ã¤r den enda som har redigerat en viss del av en fil
  - Om ni Ã¤r flera som har redigerat samma del av en viss fil
  - Om du har redigerat en fil som nÃ¥gon annan har tagit bort

#+begin_src dot :file branch2.png
  digraph G {
          rankdir="LR";
          bgcolor="transparent";
          node[width=0.15, height=0.15, shape=point, color=black];
          edge[weight=2, arrowhead=none, color=darkgray];
          node[group=master];
          1 -> 2 -> 3 -> 4 -> 5;
          node[group=branch];
          2 -> 6 -> 7 -> 4;
  }
#+end_src

#+RESULTS:
[[file:branch2.png]]

* Commit
[[./branch2.png]]

- Ofta behÃ¶ver man redigera flera filer fÃ¶r att lÃ¶sa en uppgift
- Paketera alla redigerade filer i en =commit=
- En commit har ocksÃ¥ ett meddelande som berÃ¤ttar vad man gjort.
  - Ofta lÃ¤nkat med krav-databasen eller issue-databasen
  - T.ex. Meddelandet ~Fixes #222~ kommer lÃ¤nka denna commit med issue #222.
- Den senaste committen kallas fÃ¶r /head/

*Meddelandet skall vara kort men beskrivande*
- inte bara "redigerade x.txt", utan /varfÃ¶r/, t.ex. "bakgrund om glasstilverkning.", eller "Implementerar krav #23"
- en commit == ett syfte. Flera syften, flera commits.
* Arbeta Lokalt
- Det gÃ¥r att anvÃ¤nda konfigurationshantering lokalt, bara fÃ¶r dig och din dator
- Sparar gamla versioner -- lokal backup
- HÃ¥ll isÃ¤r varje projekt -- en filsystemskatalog fÃ¶r varje
  - Program du vill skriva
  - Rapport du arbetar med
  - Kurs du gÃ¥r
  - Laboration i Kurs
- Samla och beskriv Ã¤ndringar/framsteg
  - Varje commit Ã¤r ett helt meningsfullt bidrag
  - En viss commit innehÃ¥ller alla filer som Ã¤ndrades i det bidraget
  - \dots med automatiskt versionsnummer

** Exempel -- SÃ¥ Arbetar Jag
- I huvudsak tre kataloger:
  - =~/Documents/Personal=
  - =~/Documents/Research=
  - =~/Documents/Teaching=
- Under dessa har jag projekt
  - En katalog per projekt
  - Varje katalog Ã¤r konfigurationshanterad

#+ATTR_ORG: :width 1024px
#+begin_src dot :file mydir.png
   digraph G {
           rankdir="LR"; 
           bgcolor="transparent";
           node[width=3, height=0.4, shape=folder, fontsize=12.0, color=black, fontcolor=black];
           edge[weight=2, arrowhead=none, color=darkgray];
           "ðŸ“‚ ~/Documents/" -> "ðŸ“‚ Personal"
           "ðŸ“‚ ~/Documents/" -> "ðŸ“‚ Research"
           "ðŸ“‚ ~/Documents/" -> "ðŸ“‚ Teaching"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA1458-OODesign"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA1461-Intro-ICT"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA1482-Applied-OO-Design"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA1489-Basics-SE"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA2534-Thesis"
           "ðŸ“‚ Teaching" -> "âŽ‡ PA2577-Cloud"
           "ðŸ“‚ Teaching" -> "âŽ‡ PAAPT"
           "ðŸ“‚ Teaching" -> "âŽ‡ GuestLectures"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ—Ž Readme.md"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Assignments"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Evaluations"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Formalia"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Lectures"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Planning"
           "âŽ‡ PA1489-Basics-SE" -> "ðŸ“‚ Results"
  }
#+end_src

#+ATTR_ORG: :width 800px
#+RESULTS:
[[file:mydir.png]]
* Flera AnvÃ¤ndare
- FÃ¶r att samarbeta i ett projekt underlÃ¤ttar det om man anvÃ¤nder en /server/
- Du arbetar fortfarande lokalt pÃ¥ din egen kopia, din /branch/
- Det gÃ¶r dina kollegor ocksÃ¥.
- Ni kommunicerar genom att ladda upp och ner till severn.

/Det hÃ¤r skiljer sig frÃ¥n vad ni Ã¤r vana vid/
- Med Teams, Google Drive, OneDrive, \dots arbetar ni alla mot /samma/ fil, /samtidigt/ pÃ¥ en server.
  - I en del program syns det att flera redigerar samtidigt
  - I mÃ¥nga fall sÃ¥ blir det ett /race-condition/ om vem som sparar fÃ¶rst/sist
  - Den som sparar senast skriver Ã¶ver alla andras Ã¤ndringar

#+begin_src dot :file sever-collab.png
  digraph G {
          rankdir="LR";
          bgcolor="transparent";
          node[width=0.15, height=0.15, shape=point, fontsize=10.0 color=black, fontcolor=black];
          edge[weight=2, arrowhead=none, color=darkgray];
          node[group=main];
          1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7;
          node[group=branch1];
          2 -> a -> b -> c -> d -> 5;

          1[shape=box,label="main"];
          a[shape=box,label="din kopia"];

          node[group=branch2];
          2 -> aa -> bb -> cc -> 6;
          aa[shape=box,label="din kompis kopia"];
  }

#+end_src

#+RESULTS:
[[file:sever-collab.png]]

* Flera FÃ¶rgreningar/Branches
:PROPERTIES:
:BEAMER_OPT: shrink=30
:END:

Man kan ha hur mÃ¥nga fÃ¶rgreningar man vill, och skapa dem av vilka anledningar som helst.

#+begin_src dot :file collab-branching.png
  digraph G {
          rankdir="LR";
          bgcolor="transparent";
          node[width=0.15, height=0.15, shape=point, fontsize=10.0, color=black, fontcolor=black];
          edge[weight=2, arrowhead=none, color=darkgray];

          node[group=main];
          1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7;
          1[shape=box,label="main"];

          node[group=branch1];
          2 -> a -> b -> c -> d -> 5;
          a[shape=box,label="din kopia"];

          node[group=branch2];
          2 -> aa -> bb -> cc -> dd -> ee -> ff -> gg -> 6;
          aa[shape=box,label="din kompis kopia"];
          cc[shape=box,label="Feature 1"];

          node[group=branch3];
          bb -> aaa -> bbb -> ccc -> gg;
          aaa[shape=box,label="Feature 2"];
  }

#+end_src

#+RESULTS:
[[file:collab-branching.png]]

** Git Flow :Extra:
Ett strukturerat exempel pÃ¥ hur man kan arbeta Ã¤r /Git Flow/-modellen:
- main :: HÃ¥ller bara "stabila" releaser. Man arbetar inte pÃ¥ den hÃ¤r fÃ¶rgreningen.
- develop :: Integration av features. Ingen nyutveckling hÃ¤r, utan bara merge-arbete.
- feature :: En per feature man arbetar med. Ny feature == ny fÃ¶rgrening.
- release :: Fixa det sista innan man kan slÃ¤ppa nÃ¤sta stÃ¶rre release.
- hotfix :: Om man absolut mÃ¥ste fixa nÃ¥got /just nu/ i den senaste produkten.
[[./git-example-git-flow.png]]

* Publicera Ã„ndringar: Merge
[[file:collab-branching.png]]

- Varje gÃ¥ng som tvÃ¥ linjer gÃ¥r ihop i grafen:
  - "din kopia" gÃ¥r ihop med "main"
  - "Feature 2" gÃ¥r ihop med "Feature 1"
  - "Feature 1" gÃ¥r ihop med "main"
- Det hÃ¤r kallas en *Merge* och gÃ¥r ut pÃ¥ att man
  1. byter till "fÃ¶rÃ¤lder-fÃ¶rgreningen"  (ex. =byt till "main"=)
  2. hÃ¤mtar fÃ¶rÃ¤ndringarna (ex. =hÃ¤mta filerna frÃ¥n "din kopia"=)
  3. committar fÃ¶rÃ¤ndringarna (ex. =commit fil a,b till "main"=)
- Den nya committen Ã¤r sedan tillgÃ¤nglig till alla andra som anvÃ¤nder den fÃ¶rgreningen.
  - \dots sÃ¥ snart de har hÃ¤mtat den!
  - I exemplet ovan, sÃ¥ mÃ¥ste din kompis hÃ¤mta frÃ¥n "main" och sedan kombinera Ã¤ndringarna i main med sin fÃ¶rgrening
* Att Hantera Merge
#+begin_src dot :file collab-branching-merge.png
  digraph G {
  rankdir="LR";
  bgcolor="transparent";
  node[width=0.15, height=0.15, shape=point, fontsize=10.0, color=black, fontcolor=black];
  edge[weight=2, arrowhead=none, color=darkgray];

  node[group=main];
  1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7;
  1[shape=box,label="main"];

  node[group=branch1];
  2 -> a -> b -> c -> d -> 5;
  a[shape=box,label="din kopia"];

  node[group=branch2];
  2 -> aa -> bb -> cc -> dd -> ee -> ff
  aa[shape=box,label="din kompis kopia"];
  cc[shape=box,label="Feature 1"];
  5 -> ff -> gg [color=darkred, arrowhead=normal];

  node[group=branch3];
  bb -> aaa -> bbb -> ccc;
  aaa[shape=box,label="Feature 2"];
  ccc -> gg -> 6 [color=darkred, arrowhead=normal];
  }

#+end_src

#+RESULTS:
[[file:collab-branching-merge.png]]


- Att kombinera olika fÃ¶rgreningar Ã¤r svÃ¥rt.
- Moderna konfigurationshanteringsverktyg har slutat fÃ¶rsÃ¶ka.
  - De varnar anvÃ¤ndaren och vÃ¤grar fortsÃ¤tta tills dess konflikten Ã¤r fixad.
- Strategi 1 :: Ha en egen fÃ¶rgrening, t.ex. fÃ¶r en viss feature, dÃ¤r fÃ¤rre utvecklare Ã¤r inblandade.
- Strategi 2 :: Ha en egen fÃ¶rgrening av feature-fÃ¶rgreningen (local branch).

Men till slut rÃ¤cker inte detta, utan du behÃ¶ver kombinera grenarna.
- Din lokala gren med gruppens
- Feature-grenen med utvecklingsgrenen
- Utvecklingsgrenen med main-grenen
- I distribuerade CM-verktyg som =git= kan du ocksÃ¥ hÃ¤mta en fÃ¶rgrening frÃ¥n en annan utvecklare.

*FÃ¶rr eller senare kommer du dÃ¥ behÃ¶va hantera konflikter mellan grenarna.*
* diff -- Vad Skiljer sig Ã¥t?
#+begin_src bash :results output
  cd /tmp
  echo "aaa" > first.txt ; echo "aaa" > second.txt
  echo "bbb" >> first.txt; echo "BBB" >> second.txt
  echo "ccc" >> first.txt; echo "ccc" >> second.txt
  echo "ddd" >> second.txt

  cat first.txt
  echo "----------"
  cat second.txt
  echo "----------"
  diff first.txt second.txt
#+end_src

#+RESULTS:
#+begin_example
aaa
bbb
ccc
----------
aaa
BBB
ccc
ddd
----------
2c2
< bbb
---
> BBB
3a4
> ddd
#+end_example

- Hur lÃ¤ser vi detta?
- Helst inte; det finns bra verktyg fÃ¶r det.

#+begin_src bash :results none
meld /tmp/first.txt /tmp/second.txt
#+end_src
** Att lÃ¤sa en diff :Extra:
#+begin_verse
CHANGE-COMMAND
< FROM-FILE-LINE
< FROM-FILE-LINE...
---
> TO-FILE-LINE
> TO-FILE-LINE...
#+end_verse

DÃ¤r CHANGE-COMMAND Ã¤r:
- =LaR= : Add the lines in range R of the second (right) file after line L in the first (left) file.
- =LcR= : Change the lines in range L of the first (left) file with the lines in range R of the second (right) file.
- =LdR= : Delete the lines in range L of the first (left) file, line R is where they would have appeared in the second (right) file.

* Three-Way Merge
:PROPERTIES:
:BEAMER_OPT: shrink=30
:END:

- AnvÃ¤nder ett gemensamt ursprung fÃ¶r att avgÃ¶ra om fÃ¶rÃ¤ndringar Ã¤r nya eller inte.
- Skapar ibland lite nya problem
  - Vad hÃ¤nder t.ex. i figuren nedan om "GG" anvÃ¤nder sig av "AA"?
  - t.ex. en ~#include~ , eller en referens i text /"som tidigare nÃ¤mnt"/
- NÃ¤r bÃ¥da filerna Ã¤ndrats sÃ¥ mÃ¥ste anvÃ¤ndaren besluta (t.ex. =f or fff?= )
[[./threewaymerge.png]]

** 3-way
#+begin_src bash :results none
meld ./3way/base ./3way/source ./3way/target -o ./3way/merged
#+end_src
** 2-way
#+begin_src bash :results none
meld ./3way/source ./3way/target
#+end_src
* Fork av ett projekt
:PROPERTIES:
:BEAMER_OPT: shrink=20
:END:

- Specifikt fÃ¶r vissa github-servrar
- NÃ¤r man vill bidra till ett projekt sÃ¥ bÃ¶rjar man med att skapa sin egen kopia, en =fork=
- Man arbetar sedan som vanligt.
- NÃ¤r man Ã¤r nÃ¶jd skapar man en =pull request= i originalprojektet
- Ã„garen av originalprojektet kan dÃ¥ inspektera fÃ¶rÃ¤ndringarna och (om de godkÃ¤nner dem) gÃ¶ra en =merge= med sitt projekt.
- BÃ¥da tvÃ¥ kan fortsÃ¤tta arbeta med sina respektive kopior av projektet. De behÃ¶ver inte fÃ¶rena dem.
[[./git-fork.png]]
* TODO Sammanfattning
*Konfigurationshantering*
- Att programmera Ã¤r att samarbeta
- Man utvecklar inte linjÃ¤rt. Man gÃ¶r fel, man vill gÃ¥ tillbaka, man vill prova olika vÃ¤gar.
- Det krÃ¤vs kraftfulla verktyg fÃ¶r att hÃ¤nga med nÃ¤r alla i ett projekt utvecklar icke-linjÃ¤rt.
  - Verktyg fÃ¶r konfigurationshantering
- Vanligast idag: =git=
- StÃ¶rsta utmaningen:
  - Att ostÃ¶rt kunna arbeta i din egen fÃ¶rgrening
  - Att kunna jÃ¤mka samman din kod med resten av projektet med hjÃ¤lp av en =merge=.

*AnvÃ¤nd Alltid Konfigurationshantering. AnvÃ¤nd Konfigurationshantering till Allt.*
LÃ¤r dig mantrat: /"If it's not committed, it does not exist!"/
