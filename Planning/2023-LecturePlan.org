#+STARTUP: OVERVIEW
#+TODO: TODO(t) | DONE(d!) WAIT(w!) INFO(i) MORT(m)

* INFO Outline
Vecka 1: Konfigurationshantering, Bli vän med din IDE 
Vecka 2--4: Utveckling med tester, debugger, och dokumentation
Vecka 5--8: Microservices, mer om konfigurationshantering

* Template
** TODO Introduktion
** TODO Sammanfattning
** TODO Nästa Föreläsning
** TODO Övning: 
** Outline

* TODO Week 1 - Intro && DevEnv
** TODO W1: Introduction
   - [ ] Course Overview
     - Contents, teaching team etc.
     - Assignments
   - [ ] An Executing Program
     - Overview picture with layers: hw, os, userspace, UI
     - Hardware
       - CPU
       - Memory
       - Disk
     - Operating System
       - Hardware Abstraction -- Resource Management
       - Interrupt Management
       - Process Management
       - Memory Management
       - Security (process containment)
       - File Management
       - Device Management
       - Networking
     - Process
       - "own" CPU
       - "own" memory
     - Thread
       - shared CPU/memory within process
     - Programkod vs körande program (Re-use Z80-slides from PA1461)
       - Compiler overview (more later)
         - Source code -> binary
         - Executing binary code
   - [ ] Pragmatic Development 
     - ch 1 : Pragmatic Philosophy
       - Commitment culture
       - How to work as individuals in a team
     - ch 2 : Pragmatic Approach
       - Design first
       - ETC principle: Easier to Change
       - DRY principle
       - Flexible Design (Change is inevitable)
       - Prototyping
       - Estimations
** DONE W1: Overview of the Development Environment
CLOSED: [2023-12-08 fre 13:41]
   - [ ] ch 3 : The Basic Tools
     - Not one specific IDE, but the principles behind
     - topic 16 Plaintext
     - topic 17 Shell
     - topic 18 Power editing -- Editor Fluency
     - topic 21 Text Manipulation
     - topic 22 Engineering daybook (diary)
     - Introduction to IntelliJ
   - [ ] Configuration Management
     - ch 3 topic 19 Version control
     - ch 9 topic 51 Pragmatic Starter Kit
     - Introduktion till CM, Git, Subversion
     - branches; git flow.
   - [ ] *Exercises* IDE && Configuration Management
     - Command Line
       - Create git project
       - clone, fetch, pull, push
       - Issue tracker -- create issue, create pull request, accept issue, etc.
       - Samarbetsövningar :: Stash, checkout, merge, review
     - IDE
       - Create Project
       - Edit, compile
       - clone, fetch, pull, push
* DONE Week 2 - Testing, Debugging, Documenting
CLOSED: [2024-02-20 tis 14:00]
** DONE W2: Testing and Debugging
CLOSED: [2024-01-12 fre 12:05]
   - [ ] ch 7 : While you are Coding
     - topic 40 refactoring
     - topic 41 Test to Code
     - topic 42 Property based testing
     - topic 43 stay safe out there
     - ch 9 topic 51 Pragmatic Starter Kit
   - [ ] Debugging
     - ch 3 topic 20 Debugging
     - Breakpoints, step into, step over, ...
     - printf-debugging , the good, bad && ugly
     - "node --inspect", 
   - [ ] *Exercises* Testing and Debugging
     - pull pre-built image (with "throw new TODO()")
     - Skapa testkod
     - testa
     - tolka output, fixa fel
     - step through program, watch a variable, find & fix an error
** DONE W2: Source Code Documentation
CLOSED: [2024-02-19 mån 14:14]
   - Self-Documenting Code (Clean Code; also Uncle Bob)
   - Packages && Structure as documentation
   - Doxygene/JavaDoc
   - Go through Java Standard Documentation
   - topic 22: Engineering diary
   - Literate Programming?
   - [ ] *Exercises* Documenting and using Documentation
     - Pull pre-built image (with partial documentation)
     - Finish the javadoc documentation && generate
     - answer questions; test whether assumptions hold
     - Use code
     - use java standard library
     - Example: If the code contains a ~List<>~, iterate over the elements .
* DONE Week 3 - Java
CLOSED: [2024-02-28 ons 14:20]
** DONE W3: A Compiled Language: Java
CLOSED: [2024-02-20 tis 13:59]
   - Quick run-down of
     - class && object, ~new~
     - attribute (Types; objects and built-in data types)
     - method (declaration, block, return)
       - ~public static void main(String [] args)~
     - conditions (if)
     - loops (for, while)
     - using packages
   - [ ] *Exercises* Java
     - Some class that implements an existing interface
     - Some iteration, some if-statements
** DONE W3: User Interfaces in Java
CLOSED: [2024-02-28 ons 14:20]
   - Text Based I/O
   - Java Swing
   - [ ] *Exercises* Java
     - Some input/output class
     - Implement and connect a Swing dialogue or two
* DONE Week 4 - Containers && Microservices
CLOSED: [2024-03-26 tis 11:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-03-26 tis 11:37]
:END:

** DONE Virtual Machines and Containers
CLOSED: [2024-03-15 fre 13:36]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-03-15 fre 13:36]
:END:
   - Overview of Virtual Machines (Re-use from PA2577)
   - Overview of Light-weight containers
   - Software to Install
     - Linux
     - Mac
     - Windows
   - Developing in a Container
   - The Choice of Programming Language
     - Skillnader mellan tolkade och kompilerade utvecklingsspråk, och deras påverkan på utvecklingsprocessen.
   - [ ] *Exercises* Containers
     - Install Software
     - docker pull, docker build, docker run, docker compose, edit running container (bind mounts)
** DONE Application Building, Microservices
CLOSED: [2024-03-26 tis 11:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-03-26 tis 11:37]
:END:
    - Microservice Architectures (from PA2577 Applied Cloud Computing And Big Data)
    - ch 6 : Concurrency
      - topic 33 Breaking Temporal Coupling
      - topic 34 Shared State is Incorrect State (=> Databases)
      - topic 35 Actors and Processes (=> Containers)
      - topic 36 blackboards (=> Databases-ish, => Message Queues )
    - REST API
    - [ ] *Exercises* Microservices
      - Docker Compose: Write a yaml to deploy and launch replicas
* TODO Week 5 - JavaScript
** DONE An Interpreted Language: JavaScript/node.js
CLOSED: [2024-04-02 tis 12:11]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-04-02 tis 12:11]
:END:
   - Classes, objects, methods, functions
   - Modules, exports
   - ~nodemon~ to restart app on changes
   - [ ] *Exercises* JavaScript
     - pull small project
     - implement some simple classes
** DONE Client and Server Applications in JavaScript
CLOSED: [2024-04-12 fre 10:58]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-04-12 fre 10:58]
:END:
   - nodegui https://docs.nodegui.org/ (Maybe not, seems more trouble than its worth right now)
   - yue https://github.com/yue/yue ?
   - electron (bloated!)
   - https://github.com/sudhakar3697/awesome-electron-alternatives
   - express.js
   - nodemon?
   - Kan man komma åt node inuti en körande container?
   - a node.js test framework ~mocha/chai~
   - [ ] *Exercises* JavaScript Server && Frontent
     - implement some simple frontend
     - implement a simple web service
---
- Mer om applikationsutveckling i JavaScript
- Skrivbordsapplikationer
- Klient-Server-applikationer
- Testning
* TODO Week 6 - Databases
** TODO W6: Introduction to Databases
    - Overview: SQL, NoSQL, Graph
    - Relational Databases (Tables and relations)
    - Example in e.g. mysql https://www.w3schools.com/nodejs/nodejs_mysql.asp
      - create database
      - create table
      - insert into
      - select from \dots where \dots order by \dots [ limit \dots [ offset \dots ]]
      - delete from \dots where
      - update \dots set \dots where
      - join
    - Table joins
      - inner/left/right
    - [ ] *Exercises* SQL Databases
      - Set up a simple database through adminer interface
      - connect small node.js app to db and query
---
- Introduktion till Persistent Lagring av Data och Databaser
  - Relationsdatabaser
  - NoSQL-databaser
  - Andra typer av databaser
** TODO W6: Introduction to NoSQL Databases
    - MongoDB: Databases, collections, documents
    - json
    - dangers of no structure - no heads-up-design
    - [ ] *Exercises* MongoDB, Redis
      - Simple MongoDB database, something that shows the flexibilty (and danger) over sql.
      - some key/value data to add to a redis database too.
* TODO Week 7 - Putting it together; Runtime Edits
** TODO W7: Putting it all together: BurgerOrderer
    - Walkthrough of BurgerOrderer system
    - [ ] *Exercises* BurgerOrder
      - set up docker-compose file
      - Get menus/menuitems from database and create in-memory objects (according to given interface)
** MORT W7: Runtime Edits
CLOSED: [2024-04-05 fre 10:54]
<2024-04-05 fre> Already covered at length

    - Difference between deployments: local development, test, production
    - How to edit running container
* TODO Week 8 - ??
** TODO W8: ??
** TODO W8: ??
* TODO Prepare Material
*IDEA* Maybe I can use Ponies as a start?

- [X] Lecture 03: Project to run testing and debugging on
- [X] Lecture 04: Project with half-finished documentation
- [ ] Lecture 05+06: More to do in projects from lecture 03 and 04 in Java
  - *Implement PonyStatistics* so they can use it in Lecture 06!
    - As a patch?
- [ ] Lecture 07: Simple JavaScript application
- [ ] Lecture 08: Express application
- [ ] Lecture 09: Simple docker app (QFStandalone?)
- [ ] Lecture 10: More complex docker app (QFV3)
- [ ] Lecture 11: Docker Compose: mysql, adminer, one microservice to populate, another to query
- [ ] Lecture 12: Same but for MongoDB
- [ ] Lecture 13: BurgerOrderer: orderSystem, cookingSystem, menuDatabase, static CDN for images

nodegui: fix package.json:
---
"dependencies": {
    "@nodegui/nodegui": "^0.59.0"
  },
  ---
* TODO Inlämningsuppgifter
1. Git && Collaboration
2. Debug & Test (in Containers)
3. Implement & Document

*TODO* Låna friskt från dbwebb, t.ex. https://dbwebb.se/kurser/js-v2/kmom10
- Projekt i slutet "intelligenstest"
  - ett antal obligatoriska punkter
  - ett antal frivilliga
  - *reflekterande text om varje punkt (5-10 meningar).*
* Lost Puppies
** WAIT Input från terminalen
https://nodejs.org/en/learn/command-line/accept-input-from-the-command-line-in-nodejs
https://github.com/SBoudrias/Inquirer.js
#+begin_src javascript
const readline = require('node:readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

rl.question(`What's your name?`, name => {
  console.log(`Hi ${name}!`);
  rl.close();
});
#+end_src
